Jeux de plateforme : Beauty Savior


Liste des fonctionnalités : 
    -        Systèmes de chargement/sauvegarde (Possibilité de récupérer et conserver l’avancée d’un joueur).
    -        Gestions basiques des scores.
    -        Gestion du temps (Un niveau doit être terminé dans un temps imparti).
    -        Mise en place d’un système de collectes d’objets.
    -        Changement de décor en fonction des niveaux.
    -        Gestion des collisions (décor, ennemi).
    -        Déplacement dans le décor de l’héroïne.
    -        Mini AI des ennemis 


Règles: 

    - Le joueur court à travers différents niveaux, tuant les ennemis s’y trouvant, les objets dans 
    -les niveaux peuvent être détruits ou récupérés. Il doit finir le niveau dans un temps imparti.


Contrôle du joueur:

    - On contrôle le joueur avec les touches du clavier :
    - Flèche du haut pour sauter 
    - Flèche Right pour aller à Right 
    - Flèche Left pour aller à Left 
    - Espace pour lancer un objet.


Liste des différentes entités : 

    - GameStage -> Structure ayant la responsabilité des différents états du jeux 
        -> Menu principal
        -> En pause 
        -> Game Over 

    - Items -> Gestion de tous les items disponibles sur un niveau  
    - Input -> Gestion du clavier 
    - GameObject -> Héros 
                 -> Ennemi 

    - Save-> Gestion de la sauvegarde des données du jeux ainsi que de leurs chargement 
    - Map -> Gestion des différents niveaux du jeux 
    - Score -> Gestion du scoring 
  

/// Modification des entités du jeux :
Nouveau modèle

        
Player 
    -> getPlayer()
    -> getPlayerX()
    -> getPlayerY()
    -> Set_Level(int niveau)
    -> deplacement()
    -> afficherJoueur()

Menu
    ->  getGameObject()
    ->  Init_Menu()
    ->  Ecran_Afficher()
    ->  Ecran_Actif()
    ->  Nettoyer_Ecran()
        ----> Menu principal
        ----> Menu pause
        ----> Menu Chargement 
        ----> Menu Game Over
        ----> Ecran jeux ( s'occupe de la gestion des données quand on est en jeux )


Texture_Manager -> SDL_Texture
                -> Largeur , Hauteur de la texture

                -> Image_Load() 
                -> dessinerImage()
                -> dessinerImages() // Dessine une portion de l'image
                -> ChargerTexte()
                -> LibérerRessources()

Scores  -> getScores()
        -> nouveauScores()


Chargement/sauvegarde 
        -> ChargerJeux()
        -> SauvegarderJeux() 

Input 
    -> getInput()
    -> Input()

Map  ->cameraX
     ->cameray

    
    -> getMap()
    -> 
     


