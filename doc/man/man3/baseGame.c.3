.TH "src/baseGame.c" 3 "Dimanche 3 Mai 2020" "Version 0.1" "Beauty Savior" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/baseGame.c \- Programme qui gère les différents comportements du jeu en fonction de l'état\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'baseGame\&.h'\fP
.br
\fC#include 'commun\&.h'\fP
.br

.SS "Fonctions"

.in +1c
.ti -1c
.RI "\fBBase_Game\fP * \fBgetBaseGame\fP ()"
.br
.RI "Fonction qui permet d'accéder à la structure qui gère l'état du jeu\&. "
.ti -1c
.RI "void \fBUpdate\fP (float \fBdt\fP)"
.br
.RI "Fonction qui permet gérer les comportements des entités si on se trouve dans une partie et gérer le son si on se trouve sur le menu principal\&. "
.ti -1c
.RI "void \fBRendu_Jeux\fP ()"
.br
.RI "Fonction qui permet de gérer le rendu\&. "
.ti -1c
.RI "void \fBUpdate_Listes\fP ()"
.br
.RI "Fonction qui met à jour les listes des bullets et des ennemis\&. "
.ti -1c
.RI "void \fBInit_Textures\fP ()"
.br
.RI "Fonction qui charge les textures des ennemis, des pièces, des cailloux, des branches et des os\&. "
.ti -1c
.RI "void \fBNettoyers_Textures\fP ()"
.br
.ti -1c
.RI "void \fBdelay\fP (unsigned int frameLimit)"
.br
.RI "Fonction qui permet de gérer le délai du jeu\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBBase_Game\fP \fBgame\fP"
.br
.ti -1c
.RI "SDL_Texture * \fBtexture\fP"
.br
.ti -1c
.RI "SDL_Texture * \fBitemTex\fP"
.br
.ti -1c
.RI "SDL_Texture * \fBrockTex\fP"
.br
.ti -1c
.RI "SDL_Texture * \fBtreeTex\fP"
.br
.ti -1c
.RI "SDL_Texture * \fBosTex\fP"
.br
.ti -1c
.RI "int \fBlast_frame_time\fP = 0"
.br
.ti -1c
.RI "float \fBdt\fP = 0\&.0f"
.br
.in -1c
.SH "Description détaillée"
.PP 
Programme qui gère les différents comportements du jeu en fonction de l'état\&. 


.PP
\fBAuteur\fP
.RS 4
CALVADOS Cindy, CHAUMULON Cassandra, CHELLI Célia, OUSMANOVA Karina 
.RE
.PP
\fBVersion\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate\fP
.RS 4
janvier 2020
.RE
.PP
Etat possible : en cours de partie, en pause\&.\&.\&. 
.SH "Documentation des fonctions"
.PP 
.SS "delay (unsigned int frameLimit)"

.PP
Fonction qui permet de gérer le délai du jeu\&. Gestion d'un délai lors de la mise à jour du jeu, afin de laisser respirer le processeur 
.PP
\fBRenvoie\fP
.RS 4
pas de valeur de retour (void) 
.RE
.PP

.SS "\fBBase_Game\fP * getBaseGame ()"

.PP
Fonction qui permet d'accéder à la structure qui gère l'état du jeu\&. 
.PP
\fBRenvoie\fP
.RS 4
Un pointeur sur une structure de données de type Base_Game 
.RE
.PP

.SS "void Init_Textures ()"

.PP
Fonction qui charge les textures des ennemis, des pièces, des cailloux, des branches et des os\&. Fonction qui détruit les textures des ennemis, des pièces, des cailloux, des branches et des os\&.
.PP
\fBRenvoie\fP
.RS 4
pas de valeur de retour (void) 
.RE
.PP

.SS "void Rendu_Jeux ()"

.PP
Fonction qui permet de gérer le rendu\&. Affichage en fonction de l'etat dans lequel se trouve le jeu 
.PP
\fBRenvoie\fP
.RS 4
pas de valeur de retour (void) 
.RE
.PP

.SS "void Update (float dt)"

.PP
Fonction qui permet gérer les comportements des entités si on se trouve dans une partie et gérer le son si on se trouve sur le menu principal\&. Etat du jeu possible : menu principal ou en partie 
.PP
\fBParamètres\fP
.RS 4
\fIdt\fP valeur du delta-time 
.RE
.PP
\fBRenvoie\fP
.RS 4
pas de valeur de retour (void) 
.RE
.PP

.SS "void Update_Listes ()"

.PP
Fonction qui met à jour les listes des bullets et des ennemis\&. Suppression des listes si nécessaire 
.PP
\fBRenvoie\fP
.RS 4
pas de valeur de retour (void) 
.RE
.PP

.SH "Documentation des variables"
.PP 
.SS "float dt = 0\&.0f"
Delta-time = temps écoulé entre l'affichage de chaque image 
.SS "\fBBase_Game\fP game"
Structure qui gère l'état du jeu 
.SS "SDL_Texture* itemTex"
Texture pour les pièces 
.SS "int last_frame_time = 0"
Temps écoulé depuis la dernière image 
.SS "SDL_Texture* osTex"
Texture pour les os 
.SS "SDL_Texture* rockTex"
Texture pour les cailloux 
.SS "SDL_Texture* texture"
Texture pour les ennemis 
.SS "SDL_Texture* treeTex"
Texture pour les branches 
.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Beauty Savior à partir du code source\&.
